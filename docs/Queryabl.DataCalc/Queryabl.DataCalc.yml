### YamlMime:ManagedReference
items:
- uid: Queryabl.DataCalc
  commentId: T:Queryabl.DataCalc
  id: DataCalc
  parent: Queryabl
  children:
  - Queryabl.DataCalc.CollEvenLength``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})
  - Queryabl.DataCalc.CollEvenLength``1(System.Linq.IQueryable{System.Collections.Generic.IEnumerable{``0}})
  - Queryabl.DataCalc.FilterNumerics``1(System.Collections.Generic.IEnumerable{``0})
  - Queryabl.DataCalc.FilterNumerics``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - Queryabl.DataCalc.FreqObjsOccur``1(System.Linq.IQueryable{``0})
  - Queryabl.DataCalc.FreqOccur``1(System.Linq.IQueryable{``0})
  - Queryabl.DataCalc.SelectIntMatrix(System.Linq.IQueryable{System.String},System.Func{System.String,System.Boolean}[])
  - Queryabl.DataCalc.SelectIntMatrix(System.Linq.IQueryable{System.String},System.Int32)
  - Queryabl.DataCalc.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - Queryabl.DataCalc.WhereDist``1(System.Linq.IQueryable{System.String},System.String,System.Int32)
  - Queryabl.DataCalc.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  langs:
  - csharp
  - vb
  name: DataCalc
  nameWithType: DataCalc
  fullName: Queryabl.DataCalc
  type: Class
  source:
    id: DataCalc
    path: C:\Users\standarduser\Source\Repos\Queryabl\Queryabl\DataCalc.cs
    startLine: 15
  assemblies:
  - Queryabl
  namespace: Queryabl
  summary: >-
    Main class for extended functionality.

    Includes implementation of linq fluent clauses for "Where", "Select" 

    with relevent customizations.
  example: []
  syntax:
    content: public static class DataCalc
    content.vb: Public Module DataCalc
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: Queryabl.DataCalc.FilterNumerics``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Queryabl.DataCalc.FilterNumerics``1(System.Collections.Generic.IEnumerable{``0})
  id: FilterNumerics``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: Queryabl.DataCalc
  langs:
  - csharp
  - vb
  name: FilterNumerics<T>(IEnumerable<T>)
  nameWithType: DataCalc.FilterNumerics<T>(IEnumerable<T>)
  fullName: Queryabl.DataCalc.FilterNumerics<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    id: FilterNumerics
    path: C:\Users\standarduser\Source\Repos\Queryabl\Queryabl\DataCalc.cs
    startLine: 32
  assemblies:
  - Queryabl
  namespace: Queryabl
  summary: >-
    NOTE: This is an example of how this should be done if implemented in code using methods (still Where(), Select() can be used).

    Allows for mixed generic enumerated data type filtering,

    retrieves and filters all numerical values only from the generic IEnumerable list.
  example:
  - >-
    Get the numbers from a mixed data type list.

    <pre><code class="lang-csharp">var ienum_mixed = new List{ 103,"vffsd","fmos",new List{"gfdfs","fsd","3489"},9.0,89.3m,99.42m,1,90000000000};

    var ienum_nums = ienum_mixed.FilterNumerics();</code></pre>
  syntax:
    content: public static IEnumerable<T> FilterNumerics<T>(this IEnumerable<T> source)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Input data source of IEnumerable
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Filtered generic IEnumerable list of values
    content.vb: Public Shared Function FilterNumerics(Of T)(source As IEnumerable(Of T)) As IEnumerable(Of T)
  overload: Queryabl.DataCalc.FilterNumerics*
  nameWithType.vb: DataCalc.FilterNumerics(Of T)(IEnumerable(Of T))
  fullName.vb: Queryabl.DataCalc.FilterNumerics(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: FilterNumerics(Of T)(IEnumerable(Of T))
- uid: Queryabl.DataCalc.FilterNumerics``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  commentId: M:Queryabl.DataCalc.FilterNumerics``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  id: FilterNumerics``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: Queryabl.DataCalc
  langs:
  - csharp
  - vb
  name: FilterNumerics<T>(IEnumerable<T>, Func<T, bool>)
  nameWithType: DataCalc.FilterNumerics<T>(IEnumerable<T>, Func<T, bool>)
  fullName: Queryabl.DataCalc.FilterNumerics<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, bool>)
  type: Method
  source:
    id: FilterNumerics
    path: C:\Users\standarduser\Source\Repos\Queryabl\Queryabl\DataCalc.cs
    startLine: 66
  assemblies:
  - Queryabl
  namespace: Queryabl
  summary: >-
    NOTE: This is an example of how this should be done if implemented in code using methods (still Where(), Select() can be used).

    Additional examples displaying extended usage on generic IEnumerables/IQueryables on mixed data types,

    uses anonymous function(s) for filtering.
  example:
  - >-
    Get the numbers from a mixed data type list, simple examples with filters on queryable parts for

    extended numerical filtering on data cleanup operations.

    NOTE: FilterNumerics is used only for removing all non-numerical datatypes at once.

    <pre><code class="lang-csharp">IQueryable alldata = new List { 103, "vffsd", "fmos", new List { "gfdfs", "fsd", "3489" }, 9.0, 89.3m, 99.42m, 1, 90000000000 }.AsQueryable();

    var numericValues = alldata.FilterNumerics();

    //Sample Default Usage - With/Without FilterNumerics()

    // .Where(n =&gt; n is long); //select only long

    // .Where(n =&gt; n.ToString().Length &gt; 10 == true); // select numeric values of prespecified length

    // .Where(n =&gt; n is UInt32); // select only uint

    // .Where(n =&gt; (n is Double) AND ((double)n &gt;= 1)); //select only doubles 'AND' should be replaced with appropriate sign</code></pre>
  syntax:
    content: public static IEnumerable<T> FilterNumerics<T>(this IEnumerable<T> source, Func<T, bool> predicate)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Input data source of IEnumerable
    - id: predicate
      type: System.Func{{T},System.Boolean}
      description: Anonymous function used as a predicate-based filter
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Filtered generic enumerable list of values
    content.vb: Public Shared Function FilterNumerics(Of T)(source As IEnumerable(Of T), predicate As Func(Of T, Boolean)) As IEnumerable(Of T)
  overload: Queryabl.DataCalc.FilterNumerics*
  nameWithType.vb: DataCalc.FilterNumerics(Of T)(IEnumerable(Of T), Func(Of T, Boolean))
  fullName.vb: Queryabl.DataCalc.FilterNumerics(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, Boolean))
  name.vb: FilterNumerics(Of T)(IEnumerable(Of T), Func(Of T, Boolean))
- uid: Queryabl.DataCalc.CollEvenLength``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})
  commentId: M:Queryabl.DataCalc.CollEvenLength``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})
  id: CollEvenLength``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})
  isExtensionMethod: true
  parent: Queryabl.DataCalc
  langs:
  - csharp
  - vb
  name: CollEvenLength<T>(IEnumerable<IEnumerable<T>>)
  nameWithType: DataCalc.CollEvenLength<T>(IEnumerable<IEnumerable<T>>)
  fullName: Queryabl.DataCalc.CollEvenLength<T>(System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<T>>)
  type: Method
  source:
    id: CollEvenLength
    path: C:\Users\standarduser\Source\Repos\Queryabl\Queryabl\DataCalc.cs
    startLine: 99
  assemblies:
  - Queryabl
  namespace: Queryabl
  summary: >-
    Retrieves an IEnumerable of generic collections that have an odd/even length

    and uses fluent syntax.
  example:
  - >-
    Filtering of nested lists based on their odd/even size.

    <pre><code class="lang-csharp">var test_list = new  {new List{1,3,4,4},

    new List{43,54,32},
    					  new List{99,10,403,10,20,10},
    					  new List{1},
    					  new List{90,40} }.AsQueryable();

    test_list.CollEvenLength(); //returns all lists that have even size.

    test_list.CollEvenLength().Take(1); //returns first list of elements that has even size.

    test_list.CollEvenLength().Take(2));  //retruns two lists of elements that have even size.</code></pre>
  syntax:
    content: public static IEnumerable<IEnumerable<T>> CollEvenLength<T>(this IEnumerable<IEnumerable<T>> source)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{{T}}}
      description: Input data source of IEnumerable of enumerations
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{{T}}}
      description: Filtered IEnumerable list of generic collections of odd or even lengths.
    content.vb: Public Shared Function CollEvenLength(Of T)(source As IEnumerable(Of IEnumerable(Of T))) As IEnumerable(Of IEnumerable(Of T))
  overload: Queryabl.DataCalc.CollEvenLength*
  nameWithType.vb: DataCalc.CollEvenLength(Of T)(IEnumerable(Of IEnumerable(Of T)))
  fullName.vb: Queryabl.DataCalc.CollEvenLength(Of T)(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.IEnumerable(Of T)))
  name.vb: CollEvenLength(Of T)(IEnumerable(Of IEnumerable(Of T)))
- uid: Queryabl.DataCalc.CollEvenLength``1(System.Linq.IQueryable{System.Collections.Generic.IEnumerable{``0}})
  commentId: M:Queryabl.DataCalc.CollEvenLength``1(System.Linq.IQueryable{System.Collections.Generic.IEnumerable{``0}})
  id: CollEvenLength``1(System.Linq.IQueryable{System.Collections.Generic.IEnumerable{``0}})
  isExtensionMethod: true
  parent: Queryabl.DataCalc
  langs:
  - csharp
  - vb
  name: CollEvenLength<T>(IQueryable<IEnumerable<T>>)
  nameWithType: DataCalc.CollEvenLength<T>(IQueryable<IEnumerable<T>>)
  fullName: Queryabl.DataCalc.CollEvenLength<T>(System.Linq.IQueryable<System.Collections.Generic.IEnumerable<T>>)
  type: Method
  source:
    id: CollEvenLength
    path: C:\Users\standarduser\Source\Repos\Queryabl\Queryabl\DataCalc.cs
    startLine: 125
  assemblies:
  - Queryabl
  namespace: Queryabl
  summary: >-
    Retrieves a Queryable of IEnumerable collections that have an odd/even length

    and uses fluent syntax.
  example:
  - >-
    Filtering of lists based on their odd/even size.

    <pre><code class="lang-csharp">var test_list = new  {new List{1,3,4,4},

    new List{43,54,32},
    					  new List{99,10,403,10,20,10},
    					  new List{1},
    					  new List{90,40} }.AsQueryable();

    test_list.CollEvenLength(); //returns all lists that have even size.

    test_list.CollEvenLength().Take(1); //returns first list of elements that has even size.

    test_list.CollEvenLength().Take(2));  //retruns two lists of elements that have even size.</code></pre>
  syntax:
    content: public static IQueryable<IEnumerable<T>> CollEvenLength<T>(this IQueryable<IEnumerable<T>> source)
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Collections.Generic.IEnumerable{{T}}}
      description: Input data source of IQueryable of enumerations
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Linq.IQueryable{System.Collections.Generic.IEnumerable{{T}}}
      description: Filtered IQueryable list of generic collections of odd or even lengths.
    content.vb: Public Shared Function CollEvenLength(Of T)(source As IQueryable(Of IEnumerable(Of T))) As IQueryable(Of IEnumerable(Of T))
  overload: Queryabl.DataCalc.CollEvenLength*
  nameWithType.vb: DataCalc.CollEvenLength(Of T)(IQueryable(Of IEnumerable(Of T)))
  fullName.vb: Queryabl.DataCalc.CollEvenLength(Of T)(System.Linq.IQueryable(Of System.Collections.Generic.IEnumerable(Of T)))
  name.vb: CollEvenLength(Of T)(IQueryable(Of IEnumerable(Of T)))
- uid: Queryabl.DataCalc.WhereDist``1(System.Linq.IQueryable{System.String},System.String,System.Int32)
  commentId: M:Queryabl.DataCalc.WhereDist``1(System.Linq.IQueryable{System.String},System.String,System.Int32)
  id: WhereDist``1(System.Linq.IQueryable{System.String},System.String,System.Int32)
  isExtensionMethod: true
  parent: Queryabl.DataCalc
  langs:
  - csharp
  - vb
  name: WhereDist<T>(IQueryable<string>, string, int)
  nameWithType: DataCalc.WhereDist<T>(IQueryable<string>, string, int)
  fullName: Queryabl.DataCalc.WhereDist<T>(System.Linq.IQueryable<string>, string, int)
  type: Method
  source:
    id: WhereDist
    path: C:\Users\standarduser\Source\Repos\Queryabl\Queryabl\DataCalc.cs
    startLine: 156
  assemblies:
  - Queryabl
  namespace: Queryabl
  summary: >-
    Retrieves a Queryable of string based on IEnumerable of string data types that equal

    to a current hamming value of N and input type str2 that are checked against.
  example:
  - >-
    Filtering per string and hamming code comparison part.

    <pre><code class="lang-csharp">IQueryable hamCheckStr = new List{"test1","test2","test3","test2","10times49","20times46","times"}.AsQueryable();

    var sourceStrings = new List { "abc", "def", "xyz" }.AsQueryable();


    sourceStrings.WhereDist("abg",1);

    sourceStrings.WhereDist("aee",2);

    hamCheckStr.WhereDist("test3",1); // all return the appropriate filtered queryable search results.</code></pre>
  syntax:
    content: public static IQueryable<string> WhereDist<T>(this IQueryable<string> str1, string str2, int distCheck)
    parameters:
    - id: str1
      type: System.Linq.IQueryable{System.String}
      description: The leftmost string part to compare with
    - id: str2
      type: System.String
      description: The rightmost string part to compare against
    - id: distCheck
      type: System.Int32
      description: The hamming value to check per string comparison
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Linq.IQueryable{System.String}
      description: Filtered IQueryable list of generic strings with same resulting hamming comparison value.
    content.vb: Public Shared Function WhereDist(Of T)(str1 As IQueryable(Of String), str2 As String, distCheck As Integer) As IQueryable(Of String)
  overload: Queryabl.DataCalc.WhereDist*
  nameWithType.vb: DataCalc.WhereDist(Of T)(IQueryable(Of String), String, Integer)
  fullName.vb: Queryabl.DataCalc.WhereDist(Of T)(System.Linq.IQueryable(Of String), String, Integer)
  name.vb: WhereDist(Of T)(IQueryable(Of String), String, Integer)
- uid: Queryabl.DataCalc.FreqObjsOccur``1(System.Linq.IQueryable{``0})
  commentId: M:Queryabl.DataCalc.FreqObjsOccur``1(System.Linq.IQueryable{``0})
  id: FreqObjsOccur``1(System.Linq.IQueryable{``0})
  isExtensionMethod: true
  parent: Queryabl.DataCalc
  langs:
  - csharp
  - vb
  name: FreqObjsOccur<T>(IQueryable<T>)
  nameWithType: DataCalc.FreqObjsOccur<T>(IQueryable<T>)
  fullName: Queryabl.DataCalc.FreqObjsOccur<T>(System.Linq.IQueryable<T>)
  type: Method
  source:
    id: FreqObjsOccur
    path: C:\Users\standarduser\Source\Repos\Queryabl\Queryabl\DataCalc.cs
    startLine: 194
  assemblies:
  - Queryabl
  namespace: Queryabl
  summary: >-
    Retrieves a Queryable listing of the top most frequently occuring objects in the 

    IQueryable input source of object type T.
  example:
  - >-
    Retrieval of all most frequently occuring objects in the input IQueryable of objects type.

    Multiple return types included in the results.

    NOTE: Prespecified class definitions for tests provided at 'code' section.

    <pre><code class="lang-csharp">public class Person { public string name = ""; public string surname = ""; public int age = 0; public Person(string n, string sn) { this.name = n; this.surname = sn; } }

    public class Animal { public string species = ""; public Animal(string spec) { this.species = spec; } }

    public class Dog { public string name = ""; public Dog(string n) { this.name = n; } }


    var per1 = new Person("john", "six");

    var anim3 = new Animal("Reptile");

    var anim2 = new Animal("canine");

    var anim1 = new Animal("feline");

    var dog1 = new Dog("spok");

    var per2 = new Person("john", "1");

    var dog2 = new Dog("tim");

    var per3 = new Person("john", "test");


    IQueryable Freq1 = new List { "gtes", 11, 15, 15, anim3, anim2, dog2, dog2, dog2, dog2, dog1, per4, per4, per1, per2, per3, 190, 190, 190, "vdvd", "3489" }.AsQueryable();

     Freq1.FreqObjsOccur(); //example for return types of T = Object</code></pre>
  syntax:
    content: public static IQueryable<T> FreqObjsOccur<T>(this IQueryable<T> source)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{T}}
      description: Input data source of IQueryable of generic enumerations
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Linq.IQueryable{{T}}
      description: Filtered IQueryable list of the most frequently occuring objects of types T - Can return multiple types of objects.
    content.vb: Public Shared Function FreqObjsOccur(Of T)(source As IQueryable(Of T)) As IQueryable(Of T)
  overload: Queryabl.DataCalc.FreqObjsOccur*
  nameWithType.vb: DataCalc.FreqObjsOccur(Of T)(IQueryable(Of T))
  fullName.vb: Queryabl.DataCalc.FreqObjsOccur(Of T)(System.Linq.IQueryable(Of T))
  name.vb: FreqObjsOccur(Of T)(IQueryable(Of T))
- uid: Queryabl.DataCalc.FreqOccur``1(System.Linq.IQueryable{``0})
  commentId: M:Queryabl.DataCalc.FreqOccur``1(System.Linq.IQueryable{``0})
  id: FreqOccur``1(System.Linq.IQueryable{``0})
  isExtensionMethod: true
  parent: Queryabl.DataCalc
  langs:
  - csharp
  - vb
  name: FreqOccur<T>(IQueryable<T>)
  nameWithType: DataCalc.FreqOccur<T>(IQueryable<T>)
  fullName: Queryabl.DataCalc.FreqOccur<T>(System.Linq.IQueryable<T>)
  type: Method
  source:
    id: FreqOccur
    path: C:\Users\standarduser\Source\Repos\Queryabl\Queryabl\DataCalc.cs
    startLine: 246
  assemblies:
  - Queryabl
  namespace: Queryabl
  summary: >-
    Retrieves the most frequently occuring object in the 

    IQueryable input source of object type T.
  example:
  - >-
    Retrieval of the most frequently occuring value of either int/string other from IQueryable.

    NOTE: Prespecified class definitions for tests provided at 'code' section.

    <pre><code class="lang-csharp">public class Person { public string name = ""; public string surname = ""; public int age = 0; public Person(string n, string sn) { this.name = n; this.surname = sn; } }

    public class Animal { public string species = ""; public Animal(string spec) { this.species = spec; } }

    public class Dog { public string name = ""; public Dog(string n) { this.name = n; } }


    var per1 = new Person("john", "six");

    var anim3 = new Animal("Reptile");

    var anim2 = new Animal("canine");

    var anim1 = new Animal("feline");

    var dog1 = new Dog("spok");

    var per2 = new Person("john", "1");

    var dog2 = new Dog("tim");

    var per3 = new Person("john", "test");


    IQueryable testFreqOcc = new List{1,5,5,6,7,7,7,7,72,2,1,4,6,11,11,11,11,11,88,88,7,34,43,5,88,61,14,23,11,100}.AsQueryable();

    IQueryable freqSeq2 = new List { "gg", "4334", "4334", "4554", "gg", "gg", "gg", "9000" }.AsQueryable();

    IQueryable Freq1 = new List { "gtes", 11, 15, 15, anim3, anim2, dog2, dog2, dog2, dog2, dog1, per4, per4, per1, per2, per3, 190, 190, 190, "vdvd", "3489" }.AsQueryable();

     testFreqOcc.FreqOccur(); //example for return types of T = int
     freqSeq2.FreqOccur(); //example for return types of T = string
     Freq1.FreqOccur(); //example for return types of T = Object</code></pre>
  syntax:
    content: public static T FreqOccur<T>(this IQueryable<T> source)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{T}}
      description: Input data source of IQueryable of generic enumerations
    typeParameters:
    - id: T
      description: ''
    return:
      type: '{T}'
      description: The single most frequently-occuring object of type T
    content.vb: Public Shared Function FreqOccur(Of T)(source As IQueryable(Of T)) As T
  overload: Queryabl.DataCalc.FreqOccur*
  nameWithType.vb: DataCalc.FreqOccur(Of T)(IQueryable(Of T))
  fullName.vb: Queryabl.DataCalc.FreqOccur(Of T)(System.Linq.IQueryable(Of T))
  name.vb: FreqOccur(Of T)(IQueryable(Of T))
- uid: Queryabl.DataCalc.SelectIntMatrix(System.Linq.IQueryable{System.String},System.Int32)
  commentId: M:Queryabl.DataCalc.SelectIntMatrix(System.Linq.IQueryable{System.String},System.Int32)
  id: SelectIntMatrix(System.Linq.IQueryable{System.String},System.Int32)
  isExtensionMethod: true
  parent: Queryabl.DataCalc
  langs:
  - csharp
  - vb
  name: SelectIntMatrix(IQueryable<string>, int)
  nameWithType: DataCalc.SelectIntMatrix(IQueryable<string>, int)
  fullName: Queryabl.DataCalc.SelectIntMatrix(System.Linq.IQueryable<string>, int)
  type: Method
  source:
    id: SelectIntMatrix
    path: C:\Users\standarduser\Source\Repos\Queryabl\Queryabl\DataCalc.cs
    startLine: 280
  assemblies:
  - Queryabl
  namespace: Queryabl
  summary: >-
    Retrieves a filtered IQueryable list of integer matrices such that their total dimensions equals to

    the maximum string length of defaultLen that is prespecified as input parameter.
  example:
  - >-
    Retrieval cases for filtered/transformed input strings that require also data input cleanup.

    NOTE: WILL THROW a System.OutofMemoryException for 2-Dim matrix values of sizes 1000x1000. 

    Output matrices accomodate string representation of numeric integer values of up to 1M of digits with no issues.

    Larger values of above 1M require more detailed testing.

    <pre><code class="lang-csharp">IQueryable BigNumStrs = new List { null, "", "0", "1", "0", "99999999004444444444444444444444444444444444444444444499999999000007777777777777777777777777777777777000000000000000009999999900000iiiiiiiiiii20202282828991111000009999888888888888888888888888888888888888888888888888888888888uu929192919uuuu00000000000013131313444(*)444_(*)99999999004444444444444444444444444444444444444444444499999999000007777777777777777777777777777777777000000000000000009999999900000iiiiiiiiiii20202282828991111000009999888888888888888888888888888888888888888888888888888888888uu929192919uuuu00000000000013131313444(*)444_(*)99999999004444444444444444444444444444444444444444444499999999000007777777777777777777777777777777777000000000000000009999999900000iiiiiiiiiii20202282828991111000009999888888888888888888888888888888888888888888888888888888888uu929192919uuuu00000000000013131313444(*)444_(*)99999999004411111111111111111111111111111111111111111111111111111555555555555555555555555444444444444499999999000007777777777777777777777777777777777000000000000000009999999900000iiiiiiiiiii20202282828991111000009999888888888888888888888888888888888888888888888888888888888uu929192919uuuu00000000000013131313444(*)444_(*)99999999004444444444444444444444444444444444444444444499999999000007777777777777777777777777777777777000000000000000009999999900000iiiiiiiiiii20202282828991111000009999888888888888888888888888888888888888888888888888888888888uu929192919uuuu00000000000013131313444(*)444_(*)99999999004444444444444444444444444444444444444444444499999999000007777777777777777777777777777777777000000000000000009999999900000iiiiiiiiiii20202282828991111000009999888888888888888888888888888888888888888888888888888888888uu929192919uuuu00000000000013131313444(*)444_(*)99999999004444444444444444444444444444444444444444444499999999000007777777777777777777777777777777777000000000000000009999999900000iiiiiiiiiii20202282828991111000009999888888888888888888888888888888888888888888888888888888888uu929192919uuuu00000000000013131313444(*)444_(*)99999999004444444444444444444444444444444444444444444499999999000007777777777777777777777777777777777000000000000000009999999900000iiiiiiiiiii20202282828991111000009999888888888888888888888888888888888888888888888888888888888uu929192919uuuu00000000000013131313444(*)444_(*)", "99999999004444444444444444444444444444444444444444444499999999000007777777777777777777777777777777777000000000000000009999999900000iiiiiiiiiii20202282828991111000009999888888888888888888888888888888888888888888888888888888888uu929192919uuuu00000000000013131313444(*)444_(*)", "999999990000000000000000000000000000000000000000", "ABD34783489BSNCI328932902309239032092390320dnsjiansiNDUsA9802398nfuiwn3e80c9unu2289cn2", "2962728abcs1119__1", null, "89348934988324934438492", "547849823200%$9232", string.Empty, "$7823934222220.00943", @"99999999999\99999.999999\.999" }.AsQueryable();

    IQueryable BigNumStrsAdded = new List { null, "111133354421999999990111110434341113443492-0323--0222999", "999000===493", "84848349349999hsus29229cusudshu0992", "34r4f3f3f3343", }.AsQueryable();

    IQueryable BigNumStrs2 = new List { null, "9999999900", "4389433493", "34r4f3f3f3343", "   83483943fd43f_0f34043f0)/__f34/" }.AsQueryable();

    IQueryable NullSeq = new List { null, null, "", string.Empty, "  334", "b  889 //" }.AsQueryable();

    var EmptySetNullChecks = null ?? new List { }.AsQueryable(); 


    BigNumStrs.SelectIntMatrix(); //return all input string-based integer representation as 2-dimensional arrays in an IQueryable.

    BigNumStrsAdded.SelectIntMatrix(2232); // return the input string-based integer representation of specified length as a 1-dimensional array.

    BigNumStrsAdded.SelectIntMatrix(237); //return the input string-based integer representation of specified length as a 2-dimensional array.

    EmptySetNullChecks .SelectIntMatrix(); //Result N/A, will throw an exception if left with no null default.</code></pre>
  syntax:
    content: public static IQueryable<int[,]> SelectIntMatrix(this IQueryable<string> source, int defaultLen = 0)
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.String}
      description: Input data source IQueryable of Large strings of Numerical values
    - id: defaultLen
      type: System.Int32
      description: >-
        Maximum used length of the string to be output as an integer matrix
            Notes: 
            - Defaults to value of zero if none specified as an argument and outputs unfiltered list of transformed strings to matrices.
            - When a value above 900 is specified, strings are transformed to 1 dimensional arrays.
    return:
      type: System.Linq.IQueryable{System.Int32[0:,0:]}
      description: Filtered IQueryable list of integer matrices based on their string input value counterparts of length = defaultLen
    content.vb: Public Shared Function SelectIntMatrix(source As IQueryable(Of String), defaultLen As Integer = 0) As IQueryable(Of Integer(,))
  overload: Queryabl.DataCalc.SelectIntMatrix*
  nameWithType.vb: DataCalc.SelectIntMatrix(IQueryable(Of String), Integer)
  fullName.vb: Queryabl.DataCalc.SelectIntMatrix(System.Linq.IQueryable(Of String), Integer)
  name.vb: SelectIntMatrix(IQueryable(Of String), Integer)
- uid: Queryabl.DataCalc.SelectIntMatrix(System.Linq.IQueryable{System.String},System.Func{System.String,System.Boolean}[])
  commentId: M:Queryabl.DataCalc.SelectIntMatrix(System.Linq.IQueryable{System.String},System.Func{System.String,System.Boolean}[])
  id: SelectIntMatrix(System.Linq.IQueryable{System.String},System.Func{System.String,System.Boolean}[])
  isExtensionMethod: true
  parent: Queryabl.DataCalc
  langs:
  - csharp
  - vb
  name: SelectIntMatrix(IQueryable<string>, params Func<string, bool>[])
  nameWithType: DataCalc.SelectIntMatrix(IQueryable<string>, params Func<string, bool>[])
  fullName: Queryabl.DataCalc.SelectIntMatrix(System.Linq.IQueryable<string>, params System.Func<string, bool>[])
  type: Method
  source:
    id: SelectIntMatrix
    path: C:\Users\standarduser\Source\Repos\Queryabl\Queryabl\DataCalc.cs
    startLine: 349
  assemblies:
  - Queryabl
  namespace: Queryabl
  summary: >-
    Retrieves a filtered IQueryable list of integer matrices,

    based on their corresponding filtering condition of the anonymous function as parameter.
  example:
  - >-
    Retrieval cases for filtered/transformed input strings that require also data input cleanup.

    NOTE: WILL THROW a System.OutofMemoryException for 2-Dim matrix values of sizes 1000x1000. 

    Output matrices accomodate string representation of numeric integer values of up to 1M of digits with no issues.

    Larger values of above 1M require more detailed testing.

    <pre><code class="lang-csharp">IQueryable BigNumStrs = new List { null, "", "0", "1", "0", "99999999004444444444444444444444444444444444444444444499999999000007777777777777777777777777777777777000000000000000009999999900000iiiiiiiiiii20202282828991111000009999888888888888888888888888888888888888888888888888888888888uu929192919uuuu00000000000013131313444(*)444_(*)99999999004444444444444444444444444444444444444444444499999999000007777777777777777777777777777777777000000000000000009999999900000iiiiiiiiiii20202282828991111000009999888888888888888888888888888888888888888888888888888888888uu929192919uuuu00000000000013131313444(*)444_(*)99999999004444444444444444444444444444444444444444444499999999000007777777777777777777777777777777777000000000000000009999999900000iiiiiiiiiii20202282828991111000009999888888888888888888888888888888888888888888888888888888888uu929192919uuuu00000000000013131313444(*)444_(*)99999999004411111111111111111111111111111111111111111111111111111555555555555555555555555444444444444499999999000007777777777777777777777777777777777000000000000000009999999900000iiiiiiiiiii20202282828991111000009999888888888888888888888888888888888888888888888888888888888uu929192919uuuu00000000000013131313444(*)444_(*)99999999004444444444444444444444444444444444444444444499999999000007777777777777777777777777777777777000000000000000009999999900000iiiiiiiiiii20202282828991111000009999888888888888888888888888888888888888888888888888888888888uu929192919uuuu00000000000013131313444(*)444_(*)99999999004444444444444444444444444444444444444444444499999999000007777777777777777777777777777777777000000000000000009999999900000iiiiiiiiiii20202282828991111000009999888888888888888888888888888888888888888888888888888888888uu929192919uuuu00000000000013131313444(*)444_(*)99999999004444444444444444444444444444444444444444444499999999000007777777777777777777777777777777777000000000000000009999999900000iiiiiiiiiii20202282828991111000009999888888888888888888888888888888888888888888888888888888888uu929192919uuuu00000000000013131313444(*)444_(*)99999999004444444444444444444444444444444444444444444499999999000007777777777777777777777777777777777000000000000000009999999900000iiiiiiiiiii20202282828991111000009999888888888888888888888888888888888888888888888888888888888uu929192919uuuu00000000000013131313444(*)444_(*)", "99999999004444444444444444444444444444444444444444444499999999000007777777777777777777777777777777777000000000000000009999999900000iiiiiiiiiii20202282828991111000009999888888888888888888888888888888888888888888888888888888888uu929192919uuuu00000000000013131313444(*)444_(*)", "999999990000000000000000000000000000000000000000", "ABD34783489BSNCI328932902309239032092390320dnsjiansiNDUsA9802398nfuiwn3e80c9unu2289cn2", "2962728abcs1119__1", null, "89348934988324934438492", "547849823200%$9232", string.Empty, "$7823934222220.00943", @"99999999999\99999.999999\.999" }.AsQueryable();

    IQueryable BigNumStrsAdded = new List { null, "111133354421999999990111110434341113443492-0323--0222999", "999000===493", "84848349349999hsus29229cusudshu0992", "34r4f3f3f3343", }.AsQueryable();

    IQueryable BigNumStrs2 = new List { null, "9999999900", "4389433493", "34r4f3f3f3343", "   83483943fd43f_0f34043f0)/__f34/" }.AsQueryable();

    IQueryable NullSeq = new List { null, null, "", string.Empty, "  334", "b  889 //" }.AsQueryable();

    var EmptySetNullChecks = null ?? new List { }.AsQueryable(); 


    BigNumStrs.SelectIntMatrix(n =&gt; n.Length &gt; 3422 || n.Length != 2232); // will return all that match string size of above 3422 as a 1-dim array and everything that is of string size 2232 as a 2-dim one.

    BigNumStrs.SelectIntMatrix(); // wille return all input string-based integer representation as 2-dim arrays in an IQueryable.

    BigNumStrsAdded.SelectIntMatrix(n =&gt; n.Length == 900); // will return all predicate conditional matches as a 1-dim array if not matched returns  a 2-dim one.

    BigNumStrsAdded.SelectIntMatrix(n =&gt; n.Length != 9000); //will return all predicate conditional matches as a 1-dim array if not matched returns  a 2-dim one.


    EmptySetNullChecks .SelectIntMatrix() //Result N/A, will throw an exception if left with no null default.</code></pre>
  syntax:
    content: public static IQueryable<int[,]> SelectIntMatrix(this IQueryable<string> source, params Func<string, bool>[] conditions)
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.String}
      description: Input data source IQueryable of Large strings of Numerical values
    - id: conditions
      type: System.Func{System.String,System.Boolean}[]
      description: Anonymous function used for conditional predicate selections for retrieving IQueryable of transformed 2-dim matrices
    return:
      type: System.Linq.IQueryable{System.Int32[0:,0:]}
      description: Filtered IQueryable list of integer matrices transformed based on the conditional predicate of the anonymous parameter function as an input
    content.vb: Public Shared Function SelectIntMatrix(source As IQueryable(Of String), ParamArray conditions As Func(Of String, Boolean)()) As IQueryable(Of Integer(,))
  overload: Queryabl.DataCalc.SelectIntMatrix*
  nameWithType.vb: DataCalc.SelectIntMatrix(IQueryable(Of String), ParamArray Func(Of String, Boolean)())
  fullName.vb: Queryabl.DataCalc.SelectIntMatrix(System.Linq.IQueryable(Of String), ParamArray System.Func(Of String, Boolean)())
  name.vb: SelectIntMatrix(IQueryable(Of String), ParamArray Func(Of String, Boolean)())
- uid: Queryabl.DataCalc.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:Queryabl.DataCalc.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: Queryabl.DataCalc
  langs:
  - csharp
  - vb
  name: Select<TSource, T>(IQueryable<TSource>, Expression<Func<TSource, T>>)
  nameWithType: DataCalc.Select<TSource, T>(IQueryable<TSource>, Expression<Func<TSource, T>>)
  fullName: Queryabl.DataCalc.Select<TSource, T>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, T>>)
  type: Method
  source:
    id: Select
    path: C:\Users\standarduser\Source\Repos\Queryabl\Queryabl\DataCalc.cs
    startLine: 455
  assemblies:
  - Queryabl
  namespace: Queryabl
  summary: Source Implementation for custom "Select()"
  example: []
  syntax:
    content: public static IQueryable<TSource> Select<TSource, T>(this IQueryable<TSource> source, Expression<Func<TSource, T>> predicate)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: ''
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{T}}}
      description: ''
    typeParameters:
    - id: TSource
      description: ''
    - id: T
      description: ''
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: ''
    content.vb: Public Shared Function [Select](Of TSource, T)(source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, T))) As IQueryable(Of TSource)
  overload: Queryabl.DataCalc.Select*
  nameWithType.vb: DataCalc.Select(Of TSource, T)(IQueryable(Of TSource), Expression(Of Func(Of TSource, T)))
  fullName.vb: Queryabl.DataCalc.Select(Of TSource, T)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, T)))
  name.vb: Select(Of TSource, T)(IQueryable(Of TSource), Expression(Of Func(Of TSource, T)))
- uid: Queryabl.DataCalc.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:Queryabl.DataCalc.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: Queryabl.DataCalc
  langs:
  - csharp
  - vb
  name: Where<TSource>(IQueryable<TSource>, Expression<Func<TSource, bool>>)
  nameWithType: DataCalc.Where<TSource>(IQueryable<TSource>, Expression<Func<TSource, bool>>)
  fullName: Queryabl.DataCalc.Where<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, bool>>)
  type: Method
  source:
    id: Where
    path: C:\Users\standarduser\Source\Repos\Queryabl\Queryabl\DataCalc.cs
    startLine: 486
  assemblies:
  - Queryabl
  namespace: Queryabl
  summary: Source Implementation for custom "Where()"
  example: []
  syntax:
    content: public static IQueryable<TSource> Where<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: ''
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: ''
    typeParameters:
    - id: TSource
      description: ''
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: ''
    content.vb: Public Shared Function Where(Of TSource)(source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As IQueryable(Of TSource)
  overload: Queryabl.DataCalc.Where*
  nameWithType.vb: DataCalc.Where(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName.vb: Queryabl.DataCalc.Where(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Boolean)))
  name.vb: Where(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
references:
- uid: Queryabl
  commentId: N:Queryabl
  href: Queryabl.html
  name: Queryabl
  nameWithType: Queryabl
  fullName: Queryabl
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Queryabl.DataCalc.FilterNumerics*
  commentId: Overload:Queryabl.DataCalc.FilterNumerics
  href: Queryabl.DataCalc.html#Queryabl.DataCalc.FilterNumerics``1(System.Collections.Generic.IEnumerable{``0})
  name: FilterNumerics
  nameWithType: DataCalc.FilterNumerics
  fullName: Queryabl.DataCalc.FilterNumerics
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Func{{T},System.Boolean}
  commentId: T:System.Func{``0,System.Boolean}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, bool>
  nameWithType: Func<T, bool>
  fullName: System.Func<T, bool>
  nameWithType.vb: Func(Of T, Boolean)
  fullName.vb: System.Func(Of T, Boolean)
  name.vb: Func(Of T, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: Queryabl.DataCalc.CollEvenLength*
  commentId: Overload:Queryabl.DataCalc.CollEvenLength
  href: Queryabl.DataCalc.html#Queryabl.DataCalc.CollEvenLength``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})
  name: CollEvenLength
  nameWithType: DataCalc.CollEvenLength
  fullName: Queryabl.DataCalc.CollEvenLength
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{{T}}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<IEnumerable<T>>
  nameWithType: IEnumerable<IEnumerable<T>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<T>>
  nameWithType.vb: IEnumerable(Of IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.IEnumerable(Of T))
  name.vb: IEnumerable(Of IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.Linq.IQueryable{System.Collections.Generic.IEnumerable{{T}}}
  commentId: T:System.Linq.IQueryable{System.Collections.Generic.IEnumerable{``0}}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.iqueryable-1
  name: IQueryable<IEnumerable<T>>
  nameWithType: IQueryable<IEnumerable<T>>
  fullName: System.Linq.IQueryable<System.Collections.Generic.IEnumerable<T>>
  nameWithType.vb: IQueryable(Of IEnumerable(Of T))
  fullName.vb: System.Linq.IQueryable(Of System.Collections.Generic.IEnumerable(Of T))
  name.vb: IQueryable(Of IEnumerable(Of T))
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.iqueryable-1
  - name: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.iqueryable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.Linq.IQueryable`1
  commentId: T:System.Linq.IQueryable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.linq.iqueryable-1
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullName.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.iqueryable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.iqueryable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
- uid: Queryabl.DataCalc.WhereDist*
  commentId: Overload:Queryabl.DataCalc.WhereDist
  href: Queryabl.DataCalc.html#Queryabl.DataCalc.WhereDist``1(System.Linq.IQueryable{System.String},System.String,System.Int32)
  name: WhereDist
  nameWithType: DataCalc.WhereDist
  fullName: Queryabl.DataCalc.WhereDist
- uid: System.Linq.IQueryable{System.String}
  commentId: T:System.Linq.IQueryable{System.String}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.iqueryable-1
  name: IQueryable<string>
  nameWithType: IQueryable<string>
  fullName: System.Linq.IQueryable<string>
  nameWithType.vb: IQueryable(Of String)
  fullName.vb: System.Linq.IQueryable(Of String)
  name.vb: IQueryable(Of String)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.iqueryable-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.iqueryable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Queryabl.DataCalc.FreqObjsOccur*
  commentId: Overload:Queryabl.DataCalc.FreqObjsOccur
  href: Queryabl.DataCalc.html#Queryabl.DataCalc.FreqObjsOccur``1(System.Linq.IQueryable{``0})
  name: FreqObjsOccur
  nameWithType: DataCalc.FreqObjsOccur
  fullName: Queryabl.DataCalc.FreqObjsOccur
- uid: System.Linq.IQueryable{{T}}
  commentId: T:System.Linq.IQueryable{``0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.iqueryable-1
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullName.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.iqueryable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.iqueryable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Queryabl.DataCalc.FreqOccur*
  commentId: Overload:Queryabl.DataCalc.FreqOccur
  href: Queryabl.DataCalc.html#Queryabl.DataCalc.FreqOccur``1(System.Linq.IQueryable{``0})
  name: FreqOccur
  nameWithType: DataCalc.FreqOccur
  fullName: Queryabl.DataCalc.FreqOccur
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  commentId: '!:T'
  name: T
  nameWithType: T
  fullName: T
- uid: Queryabl.DataCalc.SelectIntMatrix*
  commentId: Overload:Queryabl.DataCalc.SelectIntMatrix
  href: Queryabl.DataCalc.html#Queryabl.DataCalc.SelectIntMatrix(System.Linq.IQueryable{System.String},System.Int32)
  name: SelectIntMatrix
  nameWithType: DataCalc.SelectIntMatrix
  fullName: Queryabl.DataCalc.SelectIntMatrix
- uid: System.Linq.IQueryable{System.Int32[0:,0:]}
  commentId: T:System.Linq.IQueryable{System.Int32[0:,0:]}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.iqueryable-1
  name: IQueryable<int[,]>
  nameWithType: IQueryable<int[,]>
  fullName: System.Linq.IQueryable<int[,]>
  nameWithType.vb: IQueryable(Of Integer(,))
  fullName.vb: System.Linq.IQueryable(Of Integer(,))
  name.vb: IQueryable(Of Integer(,))
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.iqueryable-1
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ','
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.iqueryable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: ','
  - name: )
  - name: )
- uid: System.Func{System.String,System.Boolean}[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<string, bool>[]
  nameWithType: Func<string, bool>[]
  fullName: System.Func<string, bool>[]
  nameWithType.vb: Func(Of String, Boolean)()
  fullName.vb: System.Func(Of String, Boolean)()
  name.vb: Func(Of String, Boolean)()
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: (
  - name: )
- uid: Queryabl.DataCalc.Select*
  commentId: Overload:Queryabl.DataCalc.Select
  href: Queryabl.DataCalc.html#Queryabl.DataCalc.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: Select
  nameWithType: DataCalc.Select
  fullName: Queryabl.DataCalc.Select
- uid: System.Linq.IQueryable{{TSource}}
  commentId: T:System.Linq.IQueryable{``0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.iqueryable-1
  name: IQueryable<TSource>
  nameWithType: IQueryable<TSource>
  fullName: System.Linq.IQueryable<TSource>
  nameWithType.vb: IQueryable(Of TSource)
  fullName.vb: System.Linq.IQueryable(Of TSource)
  name.vb: IQueryable(Of TSource)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.iqueryable-1
  - name: <
  - name: TSource
  - name: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.iqueryable-1
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},{T}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,``1}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<TSource, T>>
  nameWithType: Expression<Func<TSource, T>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, T>>
  nameWithType.vb: Expression(Of Func(Of TSource, T))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, T))
  name.vb: Expression(Of Func(Of TSource, T))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - name: TDelegate
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - name: TDelegate
  - name: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions
- uid: Queryabl.DataCalc.Where*
  commentId: Overload:Queryabl.DataCalc.Where
  href: Queryabl.DataCalc.html#Queryabl.DataCalc.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: Where
  nameWithType: DataCalc.Where
  fullName: Queryabl.DataCalc.Where
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<TSource, bool>>
  nameWithType: Expression<Func<TSource, bool>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, bool>>
  nameWithType.vb: Expression(Of Func(Of TSource, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, Boolean))
  name.vb: Expression(Of Func(Of TSource, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: )
